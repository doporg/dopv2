#!/bin/bash

# script for deploying services on k8s 

# docker

# delete old version docker
sudo yum remove -y docker \
docker-client \
docker-client-latest \
docker-common \
docker-latest \
docker-latest-logrotate \
docker-logrotate \
docker-selinux \
docker-engine-selinux \
docker-engine
# install package
yum install -y yum-utils device-mapper-persistent-data  lvm2

# set stable 
yum-config-manager  --add-repo https://download.docker.com/linux/centos/docker-ce.repo

# 以下命令启用nightly存储库。
yum-config-manager --enable docker-ce-nightly
# 要启用test通道，请运行以下命令
yum-config-manager --enable docker-ce-test

# 可以通过运行带有 --disable 的 yum-config-manager 命令来禁用nightly或test存储库 。要重新启用它，请使用 --enable 。以下命令禁用nightly存储库
yum-config-manager --disable docker-ce-nightly
# 安装Docker ENGINE - COMMUNITY

yum install docker-ce docker-ce-cli containerd.io

# 启动Docker

systemctl start docker
 #查看是否启动成功
service docker status
# 通过运行hello-world 映像验证是否正确安装
docker run hello-world

# 设置开机启动Docker

systemctl enable docker && systemctl restart docker && service docker status

# 
touch /etc/docker/daemon.json
cd /etc/docker
echo '
{
  "registry-mirrors": ["https://registry.docker-cn.com"],
  "exec-opts": ["native.cgroupdriver=systemd"],
  "insecure-registries":["registry.dop.clsaa.com"]
}' > daemon.json


# 重启docker
systemctl  daemon-reload
systemctl  restart docker

# 配置nfs k8s-node1 k8s-node2 nfs-client

# 所有节点安装nfs

yum install -y nfs-common nfs-utils 

# 在master节点创建共享目录
mkdir /mnt/nfsdata
cd /mnt/nfsdata
# 授权共享目录
chmod 666 nfsdata

# 编辑exports文件

echo'/root/k8s/nfsdata *(rw,no_root_squash,no_all_squash,sync)' >> /etc/exports

# 启动rpc和nfs（注意顺序）
systemctl start rpcbind
systemctl start nfs

# 查看 某个节点上的 NFS服务器

showmount -e

# 创建PV
cd /opt/tools
touch mysql-pv.yml
echo '
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
spec:
  accessModes:
    - ReadWriteOnce     #指定访问模式
  capacity:
    storage: 1Gi    #存储容量 1G
  persistentVolumeReclaimPolicy: Retain   #回收策略 Retain 管理员手工回收 Recycle  
  #清除 PV 的数据  Delete  删除Storage Provider上的对应存储资源
  storageClassName: nfs   #指定PV 的class为nfs
  nfs:
    path: /root/k8s/nfsdata/mysql    #PV在 NFS服务器上对应的目录
    server: 172.31.164.123      #要连接的主机地址'
 > mysql-pv.yml
# 创建后执行即可
kubectl apply -f mysql-pv.yml

# 创建 PVC
touch mysql-pvc.yml
echo '
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: nfs'
 > mysql-pvc.yml
# 创建后执行即可
kubectl apply -f mysql-pvc.yml

# 部署 Mysql,这里 mysql的service采用NodePort方式部署，外部可以访问

touch mysql.yml
echo '
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  type: NodePort
  ports:
  - protocol: TCP
    nodePort: 30306
    port: 3306
    targetPort: 3306
  selector:
    app: mysql
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.6
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql       #挂载目录
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc'
 > mysql.yml

# 创建后执行即可
kubectl apply -f mysql.yml

# mongoDB

# 创建PV
touch mongodb-pv.yml
echo '
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongodb-pv
spec:
  accessModes:
    - ReadWriteOnce     #指定访问模式
  capacity:
    storage: 1Gi    #存储容量 2G
  persistentVolumeReclaimPolicy: Retain   #回收策略 Retain 管理员手工回收 Recycle  
  #清除 PV 的数据  Delete  删除Storage Provider上的对应存储资源
  storageClassName: nfs   #指定PV 的class为nfs
  nfs:
    path: /root/k8s/nfsdata/mongodb    #PV在 NFS服务器上对应的目录
    server: 172.31.164.123      #要连接的主机地址'
> mongodb-pv.yml

# 创建后执行即可
kubectl apply -f mongodb-pv.yml

# 创建 PVC
touch mongodb-pvc.yml
echo '
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mongodb-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: nfs'
 > mongodb-pvc.yml
#创建后执行即可

kubectl apply -f mongodb-pvc.yml

# 部署 MongoDB,这里 MongoDB的service采用NodePort方式部署，外部可以访问
touch mongo.yml
echo '
apiVersion: v1
kind: Service
metadata:
  name: mongo
  labels:
    app: mongo
spec:
  ports:
  - name: mongo
    port: 27017
    targetPort: 27017
  selector:
    app: mongo
---
apiVersion: v1
kind: Service
metadata: 
  name: mongo-service
  labels: 
    app: mongo
spec: 
  ports: 
  - name: mongo-http
    port: 27017
  selector: 
    app: mongo
  type: NodePort
---
apiVersion: apps/v1
kind: StatefulSet
metadata: 
  name: mongo
spec: 
  selector: 
    matchLabels: 
      app: mongo
  serviceName: "mongo"
  replicas: 2
  podManagementPolicy: Parallel
  template: 
    metadata: 
      labels: 
        app: mongo
    spec: 
      terminationGracePeriodSeconds: 10
      affinity: 
         podAntiAffinity: 
           requiredDuringSchedulingIgnoredDuringExecution: 
           - labelSelector: 
               matchExpressions: 
               - key: "app"
                 operator: In
                 values: 
                 - mongo
             topologyKey: "kubernetes.io/hostname"
      containers: 
      - name: mongo
        image: mongo
        command:  
        - mongod 
        - "--bind_ip_all"
        - "--replSet"
        - rs0
        ports: 
        - containerPort: 27017
        volumeMounts: 
        - name: mongodb-persistent-storage
          mountPath: /var/lib/mongodb
      volumes:
      - name: mongodb-persistent-storage
        persistentVolumeClaim:
          claimName: mongodb-pvc'
 > mongo.yml

# 创建后执行即可
kubectl apply -f mongo.yml


